#pragma once
// 1 (blob)
	{
	std::vector<Vec2> points = {
		{0, 0}, {3, 0}, {4, 1}, {5, 5}, {1, 4}, {0, 1}, // hull
		{1, 1}, {3, 2}, {2, 3}, {3, 3}, {3, 4} //inner
	};
	/*
		*..*..
		*X..*.
		...X..
		..XX..
		.*.X..
		......
		.....*

			*/
	std::vector<Vec2> expected_hull = { {0, 0}, {3, 0}, {4, 1}, {5, 5}, {1, 4}, {0, 1} };
	convex_hull_test(points, expected_hull, "1 (blob)");
	}
	// 2 (diamond)
	{
		std::vector<Vec2> points = {
		{2, 1}, {1, 2}, {1, 4}, {2, 5}, // hull cov
		{3, 0}, {0, 3}, {3, 6}, {6, 3}, // hull
		{3, 2}, {3, 3}, {3, 4}, {4, 3}, {2, 4} //inner
		};
		/*
		 0123456
		0...*...
		1..*....
		2.*.X...
		3*..XX.*
		4.*XX...
		5..*....
		6...*...

				*/

		std::vector<Vec2> expected_hull = { {3, 0}, {0, 3}, {3, 6}, {6, 3} };
		convex_hull_test(points, expected_hull, "2 (diamond)");
	}
	// 2.5 (diamond no covariant)
	{
		std::vector<Vec2> points = {
		{3, 0}, {0, 3}, {3, 6}, {6, 3}, // hull
		{3, 2}, {3, 3}, {3, 4}, {4, 3}, {2, 4} //inner
		};
		/*
		 0123456
		0...*...
		1.......
		2...X...
		3*..XX.*
		4..XX...
		5.......
		6...*...

				*/

		std::vector<Vec2> expected_hull = { {3, 0}, {0, 3}, {3, 6}, {6, 3} };
		convex_hull_test(points, expected_hull, "2.5 (diamond no covariant)");
	}
	// 3 (triangle)
	{
		std::vector<Vec2> points = {
		{3, 0}, {0, 3}, {6, 3}, // hull
		{3, 2}, {3, 1}, {2, 2}, {4, 2} //inner
		};
		/*
		 0123456
		0...*...
		1...X...
		2..XXX..
		3*.....*
		4.......
		5.......
		6.......

				*/

		std::vector<Vec2> expected_hull = { {3, 0}, {0, 3}, {6, 3} };
		convex_hull_test(points, expected_hull, "3 (triangle)");
	}
	// 4 (rectangle)
	{
		std::vector<Vec2> points = {
			{0, 0}, {6, 0}, {0, 3}, {6, 3}, // hull
		{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2} //inner
		};
		/*
		 0123456
		0*.....*
		1.XXXXX.
		2.XXXXX.
		3*.....*
		4.......
		5.......
		6.......

				*/

		std::vector<Vec2> expected_hull = { {0, 0}, {6, 0}, {0, 3}, {6, 3} };
		convex_hull_test(points, expected_hull, "4 (rect)");
	}
	// 5 (D shape)
	{
		std::vector<Vec2> points = {
			{0, 0}, {3, 0}, {4, 1}, {4, 4}, {3, 5}, {0, 5}, // hull
			{1, 1}, {3, 2}, {2, 3}, {1, 4}, {2, 4} //inner
		};
		/*
		 01234
		0*..*.
		1.X..*
		2...X.
		3..X..
		4.XX.*
		5*..*.
				*/
		std::vector<Vec2> expected_hull = { {0, 0}, {3, 0}, {4, 1}, {4, 4}, {3, 5}, {0, 5} };
		convex_hull_test(points, expected_hull, "5 (D shape)");
	}
	// 6 (full V shape)
	{
		std::vector<Vec2> points = {
		{2, 3}, {1, 2}, {4, 3}, {5, 2}, // hull cov
		{0, 0}, {0, 1}, {3, 4}, {6, 1}, {6, 0}, // hull
		{1, 1}, {4, 1}, {3, 2}, {4, 2}, {3, 3} //inner
		};
		/*
		 0123456
		0*.....*
		1*X..X.*
		2.*.XX*.
		3..*X*..
		4...*...
				*/

		std::vector<Vec2> expected_hull = { {0, 0}, {0, 1}, {3, 4}, {6, 1}, {6, 0} };
		convex_hull_test(points, expected_hull, "6 (full V shape)");
	}
	// 7 (triangle with dupe points)
	{
		std::vector<Vec2> points = {
		{3, 0}, {0, 3}, {6, 3}, // hull
		{3, 2}, {3, 1}, {2, 2}, {4, 2}, // inner
		{3, 2}, {0, 3}, {6, 3}, {4, 2} // dupes
		};
		/*
		 0123456
		0...*...
		1...X...
		2..XXX..
		3*.....*
		4.......
		5.......
		6.......

				*/

		std::vector<Vec2> expected_hull = { {3, 0}, {0, 3}, {6, 3} };
		convex_hull_test(points, expected_hull, "7 (triangle with dupe points)");
	}
	// 8 (right angled triangle)
	{
		std::vector<Vec2> points = {
			{5, 1}, {4, 2}, {3, 3}, {2, 4}, {1, 5}, {0, 6}, // hull cov
			{0, 0}, {0, 6}, {6, 0}, // hull
			{2, 1}, {2, 2}, {3, 2}, {1, 3} //inner
		};
		/*
		 0123456
		0*.....*
		1..X..*.
		2..XX*..
		3.X.*...
		4..*....
		5.*.....
		6*.....
				*/

		std::vector<Vec2> expected_hull = { {0, 0}, {0, 6}, {6, 0} };
		convex_hull_test(points, expected_hull, "8 (right angled triangle)");
	}

#include "convex_hull.h"
void convex_hull_test(const std::vector<Vec2>& points, std::vector<Vec2> expected_hull, const std::string& name) {
	auto arb_vecsort = [](const Vec2& a, const Vec2& b) {
		if (a.x < b.x || (a.x == b.x && a.y < b.y)) return true;
		return false;
	};
	PRINTLN(std::endl << name);
	std::vector<Vec2> hull;
	putConvexHull(points, hull);
	std::sort(hull.begin(), hull.end(), arb_vecsort);
	std::sort(expected_hull.begin(), expected_hull.end(), arb_vecsort);

	if (hull != expected_hull) {
		PRINTLN(name << " failed.");
		PRINT("Expected hull = ");
		for (const Vec2& vec : expected_hull) {
			PRINT(vec << ", ");
		}
		PRINTLN("");
		PRINT("Actual hull   = ");
		for (const Vec2& vec : hull) {
			PRINT(vec << ", ");
		}
		PRINTLN("");
	}
	else {
		PRINTLN(name << " passed.");
	}

}